# Generated by Django 5.1.3 on 2025-06-04 13:25

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Quelle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(unique=True)),
                ('url', models.URLField()),
            ],
            options={
                'verbose_name_plural': 'Quellen',
            },
        ),
        migrations.CreateModel(
            name='InhaltsKategorie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Kategorien',
            },
        ),
        migrations.CreateModel(
            name='Sprache',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=10, unique=True)),
                ('code', models.CharField(max_length=5, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Sprachen',
            },
        ),
        migrations.CreateModel(
            name='Standort',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Standorte',
            },
        ),
        migrations.CreateModel(
            name='Zielgruppe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Zielgruppen',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('präferenzen', models.ManyToManyField(blank=True, to='news.inhaltskategorie')),
                ('standorte', models.ManyToManyField(blank=True, to='news.standort')),
                ('zielgruppe', models.ManyToManyField(blank=True, to='news.zielgruppe')),
            ],
            options={
                'verbose_name_plural': 'User',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CalendarEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('start', models.DateTimeField()),
                ('end', models.DateTimeField(blank=True, null=True)),
                ('is_global', models.BooleanField(default=False)),
                ('repeat', models.CharField(choices=[('none', 'Keine'), ('daily', 'Täglich'), ('weekly', 'Wöchentlich'), ('monthly', 'Monatlich'), ('yearly', 'Jährlich')], default='none', max_length=10)),
                ('repeat_until', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='calendar_events', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Kalendereinträge',
            },
        ),
        migrations.CreateModel(
            name='ExterneWebsite',
            fields=[
                ('quelle_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='news.quelle')),
            ],
            options={
                'verbose_name_plural': 'Externe Websites',
            },
            bases=('news.quelle',),
        ),
        migrations.CreateModel(
            name='Fachschaft',
            fields=[
                ('quelle_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='news.quelle')),
            ],
            options={
                'verbose_name_plural': 'Fachschaften',
            },
            bases=('news.quelle',),
        ),
        migrations.CreateModel(
            name='InterneWebsite',
            fields=[
                ('quelle_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='news.quelle')),
            ],
            options={
                'verbose_name_plural': 'Interne Websites',
            },
            bases=('news.quelle',),
        ),
        migrations.CreateModel(
            name='Rundmail',
            fields=[
                ('quelle_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='news.quelle')),
                ('rundmail_id', models.CharField(max_length=20, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Rundmails',
            },
            bases=('news.quelle',),
        ),
        migrations.CreateModel(
            name='News',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.URLField()),
                ('titel', models.CharField(max_length=255)),
                ('erstellungsdatum', models.DateTimeField()),
                ('quelle_typ', models.CharField(choices=[('Fachschaft', 'Fachschaft'), ('Externe Website', 'Externe Website'), ('Sammel-Rundmail', 'Sammel-Rundmail'), ('Stellenangebote Sammel-Rundmail', 'Stellenangebote Sammel-Rundmail'), ('Rundmail', 'Rundmail'), ('Interne Website', 'Interne Website')], max_length=35)),
                ('kategorien', models.ManyToManyField(blank=True, to='news.inhaltskategorie')),
                ('quelle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='news.quelle')),
                ('standorte', models.ManyToManyField(blank=True, to='news.standort')),
                ('zielgruppe', models.ManyToManyField(blank=True, to='news.zielgruppe')),
            ],
            options={
                'verbose_name_plural': 'News',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='fachschaften',
            field=models.ManyToManyField(blank=True, to='news.fachschaft'),
        ),
        migrations.CreateModel(
            name='Text',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('titel', models.CharField(max_length=255)),
                ('news', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='texte', to='news.news')),
                ('sprache', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='news.sprache')),
            ],
            options={
                'verbose_name_plural': 'Texte',
                'constraints': [models.UniqueConstraint(fields=('news', 'sprache'), name='unique_news_sprache')],
            },
        ),
        migrations.AddConstraint(
            model_name='news',
            constraint=models.UniqueConstraint(fields=('titel', 'erstellungsdatum'), name='unique_news_titel_erstellungsdatum'),
        ),
    ]
